Execute (Start Unit: mkdir_if_needed):
    function GetJournalPath(journal) abort
        return bujo#VaderCall("s:format_path", g:bujo_path, a:journal)
    endfunction

Execute (- Using default journal directory):
    call bujo#VaderCall("s:mkdir_if_needed", bujo#GetInternalVariable("current_journal"))
    Assert isdirectory(GetJournalPath(bujo#GetInternalVariable("current_journal")))
    call delete(GetJournalPath(GetJournalPath(bujo#GetInternalVariable("current_journal"))) , "rf")
    Assert !isdirectory(GetJournalPath(GetJournalPath(bujo#GetInternalVariable("current_journal")))), "Failed to delete test directory"

Execute (- Using uppercase journal name):
    call bujo#VaderCall("s:mkdir_if_needed","VADER_UPPERCASE")
    Assert isdirectory(GetJournalPath("vader_uppercase")), "Folder not created: " . GetJournalPath("VADER_UPPERCASE")
    call delete(GetJournalPath("vader_uppercase"), "rf")
    Assert !isdirectory(GetJournalPath("vader_uppercase")), "Failed to delete test directory"

Execute (- Using special characters):
    call bujo#VaderCall("s:mkdir_if_needed",'VADER_SPECIAL!"Â£$%^&*()\|,<>/?;''[]"/')
    Assert isdirectory(GetJournalPath("vader_special"))
    call delete(GetJournalPath("vader_special"), "rf")
    Assert !isdirectory(GetJournalPath("vader_special")), "Failed to delete test directory"
    
Execute (- Using space character):
    call bujo#VaderCall("s:mkdir_if_needed","VADER spaces")
    Assert isdirectory(GetJournalPath("vader_spaces"))
    call delete(GetJournalPath("vader_spaces"), "rf")
    Assert !isdirectory(GetJournalPath("vader_spaces")), "Failed to delete test directory"
    
Execute (- Abort creation): 
    let g:bujo_vader_mkdir_choice = 0
    call bujo#VaderCall("s:mkdir_if_needed","VADER THROWS")
    let g:bujo_vader_mkdir_choice = 1
    Assert !isdirectory(GetJournalPath("vader_throws")), "Created directory when it should have aborted"
